#lang racket

(provide addNode
         addAllNodes
         addEdge)



;;Retorna un booleano indicando si el nodo recibido existe en el grafo
;;Recibe un nodo y un grafo
(define (hasNode? node graph)
  (cond ((null? graph)
         #f)
        ((equal? node (caar graph))
         #t)
        (else
         (hasNode? node (cdr graph)))))



;;Agrega un nuevo nodo en el grafo
;;Recibe un nodo y un grafo.
(define (addNode newNode graph)
  (cond ((not(hasNode? newNode graph))
         (append graph (list (list newNode '()))))
        (else
         graph)))




;;Agrega los nodos recibidos en la lista al grafo
;;Recibe una lista de nodos y un grafo.
(define (addAllNodes nodeList graph)
  (cond ((null? nodeList)
         graph)
        (else
         (addAllNodes (cdr nodeList) (addNode (car nodeList) graph)))))




;;Revisa si el nodo se encuentra en la lista de aristas.
;;Recibe un nodo y una lista con aristas.
(define (hasEdge? newNode edgesList)
  (cond ((null? edgesList)
         #f)
        ((equal? newNode (caar edgesList))
         #t)
        (else
         (hasEdge? newNode (cdr edgesList)))))





;;Retorna el grafo con la nueva arista
;;Recibe un nodo origen y un nodo destino para crear una nueva arista en el grafo, ademas recibe el peso de la arista y un booleano
(define (addEdge originNode endNode weight isDirected? graph)
  (cond ((and (hasNode? originNode graph) (hasNode? endNode graph))
         (cond (isDirected?
                (addEdgeAux originNode endNode weight graph))
               (else
                (addEdgeAux endNode originNode weight (addEdgeAux originNode endNode weight graph)))))
        (else
         '())))


(define (addEdgeAux originNode endNode weight tempGraph)
  (cond ((null? tempGraph)
         '())
        ((equal? originNode (caar tempGraph))
         (cond ((not(hasEdge? endNode (cadar tempGraph)))
                (cond ((equal? (cadar tempGraph) '())
                       (append (list(list originNode (list (list endNode weight)))) (cdr tempGraph)))
                      (else
                       (append (list(list originNode (append (list (list endNode weight)) (cadar tempGraph)))) (cdr tempGraph)))))
               (else
                (append tempGraph (addEdgeAux originNode endNode weight '())))))
        (else
         (append (list(car tempGraph)) (addEdgeAux originNode endNode weight (cdr tempGraph))))))


